# -*- coding: utf-8 -*-
"""
Created on Mar 22 15:01:17 2018

@author: Dylan Langone

READ: This code is used for plotting the growth rate gamma or eigenfrequency omegan vs 
the ky or kx wave number from a .out file generated by a gs2 run

Look below for where to specify the parameters to be plotted
"""
import matplotlib
matplotlib.use('agg')
from matplotlib import pyplot as plt
import numpy as np
import csv
import sys

def whatToPlot(k, om):
    result = ['','']
    if (k == 'ky'):
        result[0] = 3
    if (k == 'kx'):
        result[0] = 5
    if (om == 'omegan'):
        result[1] = 10
    if (om == 'gamma'):
        result[1] = 11
    if (result[0] == '' or result[1] == ''):
        raise ValueError('Enter \'ky\', \'kx\', \'omegan\', or \'gamma\'')
    return result


fileNames = [sys.argv[1] + '.out']

#edit to specify which columns of .out file to plot
xLabel = sys.argv[2]
yLabel = sys.argv[3]
xIndex, yIndex = whatToPlot(xLabel, yLabel)


#print (xIndex, ' ', yIndex)
x = []
y = []

for fileName in fileNames:
	fields = open(fileName, 'r')
    #create parsed array of data
	with fields:
		plots = csv.reader(fields, delimiter = ' ')
		newrows = []
		for row in plots:
			#print (row)
			newrow = []
			for e in row:
				if e != '':
					newrow.append(e)
			#print (newrow)
			newrows.append(newrow)
		
		#print (newrows)
		
	fields.close()

	#calculate max time
	maxTime = 0
	for row in newrows:
		if row[0] == 't=':
			if float(row[1]) > maxTime:
				maxTime = float(row[1])
				
	#print ("The max time is ", maxTime)

	#fill the x and y arrays
	for row in newrows:
		if (row[0] == 't=' and row[2] == 'aky='):
			if abs(float(row[1]) - maxTime) < .00001:
				x.append(float(row[xIndex]))
				y.append(float(row[yIndex]))
        
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
plt.grid(True)
#ax.title(yLabel + " vs " + xLabel + " N_theta = 128, rho_c = 0.90, at equilibrium with collisionality")
#ax.xlabel(xLabel)
#ax.ylabel(yLabel)
xMax = x[len(x) - 1]
yMin = min(y)
yMax = max(y)
yrange = yMax - yMin       
ax.semilogx(x, y, 'ro', ms = 5)
ax.axis([0, xMax, yMin - yrange/2, yMax + yrange/2])
ax.tick_params(axis='both', which='major', labelsize=20)
ax.tick_params(axis='both', which='minor', labelsize=20) 
plt.saveplot(sys.argv[1] + '.png')

    
